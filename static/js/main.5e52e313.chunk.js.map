{"version":3,"sources":["store/actions.ts","store/index.ts","api/api.ts","store/selectors.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["ActionType","setUser","payload","type","SET_USER","initialState","todos","user","store","createStore","state","action","SET_TODOS","composeWithDevTools","API_URL","getTodos","a","fetch","response","json","getUserById","userId","ok","Promise","reject","status","statusText","id","method","Selected","getTodosSelector","getUserSelector","TodoList","useState","currentValue","setCurrentValue","selectedSelect","setSelectedSelect","currentError","setCurrentError","dispatch","useDispatch","useSelector","useEffect","loadTodosFromServer","todosFromServer","getUser","userFromServer","className","placeholder","value","onChange","event","target","filteredTodos","filter","todo","title","includes","Active","completed","Complited","prepearedTodos","map","classnames","readOnly","checked","onClick","deleteTodoById","CurrentUser","unvisible","setUnvisible","loadUserFromServer","style","display","name","email","phone","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5e52e313.chunk.js","sourcesContent":["import { Todo, User } from '../react-app-env';\n\n// Action types - is just a constant. MUST have a unique value.\nexport enum ActionType {\n  SET_TODOS = 'SET_TODOS',\n  SET_USER = 'SET_USER',\n}\n\nexport interface SetTodosAction {\n  type: ActionType.SET_TODOS,\n  payload: Todo[],\n}\n\nexport interface SetUserAction {\n  type: ActionType.SET_USER,\n  payload: User | null,\n}\n\n// Action creators - a function returning an action object\nexport const setTodosAction = (payload: Todo[]): SetTodosAction => ({\n  type: ActionType.SET_TODOS,\n  payload,\n});\n\nexport const setUser = (payload: User | null): SetUserAction => ({\n  type: ActionType.SET_USER,\n  payload,\n});\n","import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { RootState } from '../react-app-env';\nimport { SetTodosAction, SetUserAction, ActionType } from './actions';\n\n// Initial state\nconst initialState: RootState = {\n  todos: [],\n  user: null,\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (\n  state = initialState,\n  action: SetTodosAction | SetUserAction,\n) => {\n  switch (action.type) {\n    case ActionType.SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case ActionType.SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","import { Todo, User } from '../react-app-env';\n\nconst API_URL = 'https://mate.academy/students-api';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n}\n\nexport async function getUserById(userId: number | undefined): Promise<User> {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.ok\n    ? response.json()\n    // eslint-disable-next-line prefer-promise-reject-errors\n    : Promise.reject(`${response.status}: ${response.statusText}`);\n}\n\nexport async function deleteTodoById(id: number) {\n  await fetch(`${API_URL}/todos/${id}`, { method: 'DELETE' });\n}\n","// Selectors - a function receiving Redux state and returning some data from it\nimport { RootState } from '../react-app-env';\n\nexport const getTodosSelector = (state: RootState) => state.todos;\nexport const getUserSelector = (state: RootState) => state.user;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './TodoList.scss';\nimport classnames from 'classnames';\nimport { deleteTodoById, getTodos, getUserById } from '../../api/api';\nimport { setTodosAction, setUser } from '../../store/actions';\nimport { getTodosSelector, getUserSelector } from '../../store/selectors';\n\nenum Selected {\n  All,\n  Active,\n  Complited,\n}\n\nexport const TodoList: React.FC = () => {\n  const [currentValue, setCurrentValue] = useState('');\n  const [selectedSelect, setSelectedSelect] = useState('0');\n  const [currentError, setCurrentError] = useState(false);\n  const dispatch = useDispatch();\n  const todos = useSelector(getTodosSelector);\n  const user = useSelector(getUserSelector);\n\n  useEffect(() => {\n    const loadTodosFromServer = async () => {\n      try {\n        const todosFromServer = await getTodos();\n\n        dispatch(setTodosAction(todosFromServer));\n      } catch (error) {\n        setCurrentError(true);\n      }\n    };\n\n    loadTodosFromServer();\n  }, [todos]);\n\n  const prepearedTodos = () => {\n    const filteredTodos = todos.filter(todo => {\n      return todo.title.includes(currentValue);\n    });\n\n    switch (+selectedSelect) {\n      case Selected.Active:\n        return filteredTodos.filter(({ completed }) => !completed);\n\n      case Selected.Complited:\n        return filteredTodos.filter(({ completed }) => completed);\n\n      default:\n        return filteredTodos;\n    }\n  };\n\n  const getUser = async (id: number) => {\n    try {\n      const userFromServer = await getUserById(id);\n\n      dispatch(setUser(userFromServer));\n    } catch (error) {\n      dispatch(setUser(null));\n    }\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n\n        <div className=\"\">\n          <input\n            type=\"text\"\n            placeholder=\"Search by title\"\n            value={currentValue}\n            data-cy=\"filterByTitle\"\n            onChange={(event) => {\n              setCurrentValue(event.target.value);\n            }}\n          />\n          {' '}\n          <select\n            onChange={(event: React.ChangeEvent<HTMLSelectElement>): void => {\n              setSelectedSelect(event.target.value);\n            }}\n          >\n            <option value=\"0\">All</option>\n            <option value=\"1\">Active</option>\n            <option value=\"2\">Complited</option>\n          </select>\n        </div>\n\n        <ul\n          className=\"TodoList__list\"\n          data-cy=\"listOfTodos\"\n        >\n          {!currentError && prepearedTodos().map(todo => (\n            <li\n              className={classnames(\n                'TodoList__item',\n                { 'TodoList__item--unchecked': !todo.completed },\n                { 'TodoList__item--checked': todo.completed },\n              )}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <div className=\"TodoList__boxbuttons\">\n                <button\n                  className={classnames(\n                    'TodoList__user-button',\n                    {\n                      'TodoList__user-button--selected':\n                      user?.id === todo.userId,\n                    },\n                  )}\n                  type=\"button\"\n                  data-cy=\"userButton\"\n                  onClick={() => {\n                    getUser(todo.userId);\n                  }}\n                >\n                  {`User ${todo.userId}`}\n                </button>\n                <button\n                  className=\"TodoList__user-button\"\n                  type=\"button\"\n                  data-cy=\"userButton\"\n                  onClick={() => {\n                    deleteTodoById(todo.id);\n                  }}\n                >\n                  X\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import './CurrentUser.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { getUserSelector } from '../../store/selectors';\nimport { getUserById } from '../../api/api';\nimport { setUser } from '../../store/actions';\n\nexport const CurrentUser: React.FC = () => {\n  const dispatch = useDispatch();\n  const user = useSelector(getUserSelector);\n  const [unvisible, setUnvisible] = useState(false);\n  const [currentError, setCurrentError] = useState('');\n\n  useEffect(() => {\n    const loadUserFromServer = async () => {\n      try {\n        const userFromServer = await getUserById(user?.id);\n\n        dispatch(setUser(userFromServer));\n      } catch (error) {\n        setCurrentError('User is not exist');\n      }\n    };\n\n    loadUserFromServer();\n  }, [user?.id]);\n\n  if (!user) {\n    return <span>{currentError}</span>;\n  }\n\n  return (\n    <>\n      <div\n        className=\"CurrentUser\"\n        style={{ display: unvisible ? 'none' : 'block' }}\n      >\n        <h2 className=\"CurrentUser__title\">\n          <span>{`User: ${user?.id}`}</span>\n        </h2>\n        <h3\n          className=\"CurrentUser__name\"\n          data-cy=\"userName\"\n        >\n          {user?.name}\n        </h3>\n        <p className=\"CurrentUser__email\">{user?.email}</p>\n        <p className=\"CurrentUser__phone\">{user?.phone}</p>\n      </div>\n      <button\n        type=\"button\"\n        className=\"CurrentUser__clear CurrentUser__button\"\n        onClick={() => {\n          setUnvisible(!unvisible);\n        }}\n      >\n        {unvisible ? 'Show' : 'Clear'}\n      </button>\n    </>\n  );\n};\n","import './App.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <CurrentUser />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { store } from './store/index';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}