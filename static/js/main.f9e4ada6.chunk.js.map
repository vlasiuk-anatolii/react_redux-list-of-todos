{"version":3,"sources":["store/actions.ts","store/index.ts","api/api.ts","store/selectors.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["SET_TODOS","ADD_TODO","SET_USER","initialState","loading","message","todos","user","store","createStore","state","action","type","payload","composeWithDevTools","API_URL","getTodos","a","fetch","response","json","getUserById","userId","Selected","getTodosSelector","getUserSelector","TodoList","useState","currentValue","setCurrentValue","selectedSelect","setSelectedSelect","dispatch","useDispatch","useSelector","useEffect","loadTodosFromServer","todosFromServer","getUser","id","userFromServer","className","placeholder","value","onChange","event","target","filteredTodos","filter","todo","title","includes","Active","completed","Complited","prepearedTodos","map","classnames","checked","onClick","CurrentUser","name","email","phone","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f9e4ada6.chunk.js","sourcesContent":["import { Action, Todo, User } from '../react-app-env';\n\n// Action types - is just a constant. MUST have a unique value.\nexport const START_LOADING = 'START_LOADING';\nexport const FINISH_LOADING = 'FINISH_LOADING';\nexport const SET_TODOS = 'SET_TODOS';\nexport const ADD_TODO = 'ADD_TODOS';\nexport const SET_USER = 'SET_USER';\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = (payload = 'No message') => ({\n  type: FINISH_LOADING,\n  payload,\n});\n\nexport const setTodosAction = (payload: Todo[]): Action => ({\n  type: SET_TODOS,\n  payload,\n});\n\nexport const addTodoAction = (payload: Todo): Action => ({\n  type: ADD_TODO,\n  payload,\n});\n\nexport const setUser = (payload: User): Action => ({\n  type: SET_USER,\n  payload,\n});\n","import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { RootState, Action } from '../react-app-env';\nimport {\n  SET_TODOS,\n  ADD_TODO,\n  SET_USER,\n} from './actions';\n\n// Initial state\nconst initialState: RootState = {\n  loading: false,\n  message: '',\n  todos: [],\n  user: null,\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case ADD_TODO:\n      return {\n        ...state,\n        todos: [...state.todos, action.payload],\n      };\n\n    case SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","import { Todo, User } from '../react-app-env';\n\nconst API_URL = 'https://mate.academy/students-api';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n}\n\nexport async function getUserById(userId: number): Promise<User> {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n}\n","// Selectors - a function receiving Redux state and returning some data from it\nimport { RootState } from '../react-app-env';\n\nexport const getTodosSelector = (state: RootState) => state.todos;\nexport const getUserSelector = (state: RootState) => state.user;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './TodoList.scss';\nimport classnames from 'classnames';\nimport { getTodos, getUserById } from '../../api/api';\nimport { setTodosAction, setUser } from '../../store/actions';\nimport { getTodosSelector, getUserSelector } from '../../store/selectors';\n\nenum Selected {\n  All,\n  Active,\n  Complited,\n}\n\nexport const TodoList: React.FC = () => {\n  const [currentValue, setCurrentValue] = useState('');\n  const [selectedSelect, setSelectedSelect] = useState('0');\n  const dispatch = useDispatch();\n  const todos = useSelector(getTodosSelector);\n  const user = useSelector(getUserSelector);\n\n  useEffect(() => {\n    const loadTodosFromServer = async () => {\n      const todosFromServer = await getTodos();\n\n      dispatch(setTodosAction(todosFromServer));\n    };\n\n    loadTodosFromServer();\n  }, []);\n\n  const prepearedTodos = () => {\n    const filteredTodos = todos.filter(todo => {\n      return todo.title.includes(currentValue);\n    });\n\n    switch (+selectedSelect) {\n      case Selected.Active:\n        return filteredTodos.filter(({ completed }) => !completed);\n\n      case Selected.Complited:\n        return filteredTodos.filter(({ completed }) => completed);\n\n      default:\n        return filteredTodos;\n    }\n  };\n\n  const getUser = async (id: number) => {\n    const userFromServer = await getUserById(id);\n\n    dispatch(setUser(userFromServer));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n\n        <div className=\"\">\n          <input\n            type=\"text\"\n            placeholder=\"Search by title\"\n            value={currentValue}\n            data-cy=\"filterByTitle\"\n            onChange={(event) => {\n              setCurrentValue(event.target.value);\n            }}\n          />\n          {' '}\n          <select\n            onChange={(event: React.ChangeEvent<HTMLSelectElement>): void => {\n              setSelectedSelect(event.target.value);\n            }}\n          >\n            <option value=\"0\">All</option>\n            <option value=\"1\">Active</option>\n            <option value=\"2\">Complited</option>\n          </select>\n        </div>\n\n        <ul\n          className=\"TodoList__list\"\n          data-cy=\"listOfTodos\"\n        >\n          {prepearedTodos().map(todo => (\n            <li\n              className={classnames(\n                'TodoList__item',\n                'TodoList__item--unchecked',\n                { 'TodoList__item--checked': todo.completed },\n              )}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={classnames(\n                  'button',\n                  'TodoList__user-button',\n                  {\n                    'TodoList__user-button--selected':\n                    user?.id === todo.userId,\n                  },\n\n                )}\n                type=\"button\"\n                data-cy=\"userButton\"\n                onClick={() => {\n                  getUser(todo.userId);\n                }}\n              >\n                {`User ${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import './CurrentUser.scss';\nimport { useSelector } from 'react-redux';\nimport { getUserSelector } from '../../store/selectors';\n\nexport const CurrentUser: React.FC = () => {\n  const user = useSelector(getUserSelector);\n\n  if (!user) {\n    return <span>No selected user!</span>;\n  }\n\n  return (\n    <>\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`User: ${user.id}`}</span>\n        </h2>\n\n        <h3\n          className=\"CurrentUser__name\"\n          data-cy=\"userName\"\n        >\n          {user.name}\n        </h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          type=\"button\"\n          onClick={() => {}}\n          className=\"CurrentUser__clear\"\n        >\n          Clear\n        </button>\n      </div>\n    </>\n  );\n};\n","import './App.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport './styles/general.scss';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <CurrentUser />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { store } from './store/index';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}